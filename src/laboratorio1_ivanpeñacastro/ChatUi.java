/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package laboratorio1_ivanpe√±acastro;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import org.json.JSONObject;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.ImageIcon;

/**
 *
 * @author IdkBu
 */
public class ChatUi extends javax.swing.JFrame {
    

    /**
     * Creates new form ChatUi
     */
    private ArrayList<String> historialCoversaciones = new ArrayList<>();
    private ArrayList<String> conversacionActual = new ArrayList<>();
    
    public ChatUi() {
        initComponents();
        setIconImage(new ImageIcon(getClass().getResource("/logo/logo.png")).getImage());
        initializeModels();
    }
    private void initializeModels() {
        DefaultListModel<String> modeloHistorial = new DefaultListModel<>();
        Historial.setModel(modeloHistorial);

        DefaultListModel<String> modeloConversacion = new DefaultListModel<>();
        Conversacion.setModel(modeloConversacion);
    }    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Pregunta = new javax.swing.JTextField();
        Enviar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Historial = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        Conversacion = new javax.swing.JList<>();
        NewChat = new javax.swing.JButton();
        Limpiar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        Pregunta.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Pregunta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PreguntaActionPerformed(evt);
            }
        });

        Enviar.setBackground(new java.awt.Color(204, 204, 255));
        Enviar.setFont(new java.awt.Font("Stencil", 0, 12)); // NOI18N
        Enviar.setText("Enviar");
        Enviar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                EnviarMouseClicked(evt);
            }
        });
        Enviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnviarActionPerformed(evt);
            }
        });

        Historial.setFont(new java.awt.Font("Stencil", 0, 12)); // NOI18N
        Historial.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                HistorialMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Historial);

        jScrollPane2.setViewportView(Conversacion);

        NewChat.setBackground(new java.awt.Color(204, 204, 255));
        NewChat.setFont(new java.awt.Font("Stencil", 0, 12)); // NOI18N
        NewChat.setText("Chat+");
        NewChat.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                NewChatMouseClicked(evt);
            }
        });
        NewChat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewChatActionPerformed(evt);
            }
        });

        Limpiar.setBackground(new java.awt.Color(204, 204, 255));
        Limpiar.setFont(new java.awt.Font("Stencil", 0, 12)); // NOI18N
        Limpiar.setText("Limpiar");
        Limpiar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LimpiarMouseClicked(evt);
            }
        });
        Limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LimpiarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Stencil", 0, 32)); // NOI18N
        jLabel1.setText("Chat");

        jLabel2.setFont(new java.awt.Font("Stencil", 0, 18)); // NOI18N
        jLabel2.setText("Historial");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(Limpiar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(Pregunta, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel1)
                            .addGap(77, 77, 77)
                            .addComponent(NewChat))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(18, 18, 18)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Enviar)))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NewChat)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Pregunta)
                    .addComponent(Enviar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(62, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Limpiar)
                .addGap(30, 30, 30))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void EnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnviarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EnviarActionPerformed

    private void EnviarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EnviarMouseClicked
        String pregunta = Pregunta.getText();
        String modelo = "gemma2:2b";
        String url = "http://localhost:11434/api/generate";

        try {
            URL urlObject = new URL(url);
            HttpURLConnection connection = (HttpURLConnection) urlObject.openConnection();
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/json; utf-8");
            connection.setRequestProperty("Accept", "application/json");
            connection.setDoOutput(true);

            // Crear el cuerpo de la solicitud
            String jsonInputString = String.format("{\"model\": \"%s\", \"prompt\":\"%s\", \"stream\": false}", modelo, pregunta);

            // Enviar la solicitud
            try (OutputStream outputStream = connection.getOutputStream()) {
                byte[] input = jsonInputString.getBytes(StandardCharsets.UTF_8);
                outputStream.write(input, 0, input.length);
            }

            // Leer la respuesta
            int responseCode = connection.getResponseCode();
            System.out.println("C√≥digo de respuesta: " + responseCode);

            if (responseCode == 200) {
                BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8));
                StringBuilder response = new StringBuilder();
                String line;
                while ((line = in.readLine()) != null) {
                    response.append(line);
                }
                in.close();

                String respuesta = response.toString();

                // Analizar la respuesta JSON
                JSONObject jsonObject = new JSONObject(respuesta);
                String textoDespuesDeResponse = jsonObject.getString("response");

                // Agregar la respuesta a la conversaci√≥n
                DefaultListModel<String> modeloConversacion = (DefaultListModel<String>) Conversacion.getModel();
                modeloConversacion.addElement("T√∫: " + pregunta);
                modeloConversacion.addElement("Ollama: " + textoDespuesDeResponse);
                Conversacion.setModel(modeloConversacion);
                
            } else {
                JOptionPane.showMessageDialog(null, "Error: " + responseCode, "Error en la conexi√≥n", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al conectar con la API.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_EnviarMouseClicked

    private void NewChatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewChatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NewChatActionPerformed

    private void NewChatMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NewChatMouseClicked
        newChat = false;
        DefaultListModel<String> modeloConversacion = (DefaultListModel<String>) Conversacion.getModel();
        // Almacenar la conversaci√≥n completa en el historial
        String conversacionCompleta = "";
        for (int i = 0; i < modeloConversacion.getSize(); i++) {
            conversacionCompleta += modeloConversacion.getElementAt(i) + "\n";
        }
        String tituloConversacion = modeloConversacion.getElementAt(0).split(":")[1].trim();

        // Eliminar el t√≠tulo existente si ya existe
        DefaultListModel<String> modeloHistorial = (DefaultListModel<String>) Historial.getModel();
        for (int i = 0; i < modeloHistorial.getSize(); i++) {
            if (modeloHistorial.getElementAt(i).equals(tituloConversacion)) {
                modeloHistorial.remove(i);
                conversaciones.remove(tituloConversacion);
                break;
            }
        }

        // Agregar el nuevo t√≠tulo al historial
        modeloHistorial.addElement(tituloConversacion);
        conversaciones.put(tituloConversacion, conversacionCompleta);

        // Refrescar el historial
        Historial.setModel(modeloHistorial);

        modeloConversacion.clear();
    }//GEN-LAST:event_NewChatMouseClicked

    private void HistorialMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HistorialMouseClicked
    String seleccion = Historial.getSelectedValue();
    String conversacionCompleta = conversaciones.get(seleccion);
    
    // Almacenar la conversaci√≥n actual en el historial
    DefaultListModel<String> modeloConversacion = (DefaultListModel<String>) Conversacion.getModel();
    if (modeloConversacion.getSize() > 0) {
        String conversacionActual = "";
        for (int i = 0; i < modeloConversacion.getSize(); i++) {
            conversacionActual += modeloConversacion.getElementAt(i) + "\n";
        }
        String tituloConversacionActual = modeloConversacion.getElementAt(0).split(":")[1].trim();
        DefaultListModel<String> modeloHistorial = (DefaultListModel<String>) Historial.getModel();
        
        // Eliminar el t√≠tulo existente si ya existe
        int indiceEliminar = -1;
        for (int i = 0; i < modeloHistorial.getSize(); i++) {
            if (modeloHistorial.getElementAt(i).equals(tituloConversacionActual)) {
                indiceEliminar = i;
                break;
            }
        }
        
        if (indiceEliminar != -1) {
            modeloHistorial.remove(indiceEliminar);
            conversaciones.remove(tituloConversacionActual);
        }
        
        // Agregar el nuevo t√≠tulo al historial
        modeloHistorial.addElement(tituloConversacionActual);
        conversaciones.put(tituloConversacionActual, conversacionActual);
    }
    
    // Sobreescribir la conversaci√≥n actual con la conversaci√≥n seleccionada
    modeloConversacion.clear();
    String[] lineasConversacion = conversacionCompleta.split("\n");
    for (String linea : lineasConversacion) {
        modeloConversacion.addElement(linea);
    }
    Conversacion.setModel(modeloConversacion);
    }//GEN-LAST:event_HistorialMouseClicked

    
    private void PreguntaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PreguntaActionPerformed
        // TODO add your handling code here:
        EnviarMouseClicked(null);
    }//GEN-LAST:event_PreguntaActionPerformed

    private void LimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LimpiarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LimpiarActionPerformed

    private void LimpiarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LimpiarMouseClicked
        DefaultListModel<String> modeloHistorial = (DefaultListModel<String>) Historial.getModel();
        modeloHistorial.clear();
        newChat = false;
    }//GEN-LAST:event_LimpiarMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChatUi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChatUi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChatUi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatUi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChatUi().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> Conversacion;
    private javax.swing.JButton Enviar;
    private javax.swing.JList<String> Historial;
    private javax.swing.JButton Limpiar;
    private javax.swing.JButton NewChat;
    private javax.swing.JTextField Pregunta;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
